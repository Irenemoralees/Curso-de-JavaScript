// Estructuras avanzadas

// Arrays avanzados

//  METODOS FUNCIONALES

// - forEach: Recorre un array y ejecuta una funciÃ³n por cada elemento.
// En este caso, imprimimos cada nÃºmero en la consola.
let numbers = [1, 2, 3, 4, 5, 6];
numbers.forEach(element => console.log(element));

// - map: Crea un nuevo array aplicando una funciÃ³n a cada elemento del original.
// AquÃ­ multiplicamos cada nÃºmero por 2.
let doubled = numbers.map(element => element * 2);
console.log(doubled);

// - filter: Filtra los elementos de un array que cumplen una condiciÃ³n.
// AquÃ­ seleccionamos solo los nÃºmeros pares.
let evens = numbers.filter(element => element % 2 === 0);
console.log(evens);

// - reduce: Reduce los elementos del array a un solo valor, acumulando resultados.
// En este caso, sumamos todos los nÃºmeros.
let sum = numbers.reduce((result, current) => result + current, 0);
console.log(sum);
/* result (tambiÃ©n llamado acumulador) es el valor acumulado en cada iteraciÃ³n.
    current es el valor actual del array que se estÃ¡ procesando en la iteraciÃ³n.
     0 es el valor inicial de result. (opcional)
ExplicaciÃ³n paso a paso:
Si numbers = [1, 2, 3, 4, 5, 6], el mÃ©todo reduce funciona asÃ­:

Primera iteraciÃ³n:
result = 0 (valor inicial)
current = 1 (primer nÃºmero del array)
result + current = 0 + 1 = 1

Segunda iteraciÃ³n:
result = 1 (resultado anterior)
current = 2
result + current = 1 + 2 = 3

Tercera iteraciÃ³n:
result = 3
current = 3
result + current = 3 + 3 = 6

Y asin hasta hacerlo con todos los nÃºmeros
*/

//  MANIPULACION DE ARRAYS

// - flat: Aplana un array con subarrays hasta la profundidad especificada.
// Imagina que tienes una lista de categorÃ­as en un sitio web y cada categorÃ­a tiene subcategorÃ­as dentro de ella:
let categorias = [
    "TecnologÃ­a",
    ["MÃ³viles", ["Android", "iPhone"]],
    ["Computadoras", ["Laptops", "Desktops"]]
];
console.log(categorias.flat(1));
console.log(categorias.flat(2));
/* AquÃ­, flat(2) nos permite obtener una lista plana sin necesidad de recorrer los subarrays con for o map, haciendo que los datos sean mÃ¡s fÃ¡ciles de usar.

ðŸ’¡ CuÃ¡ndo usar flat
1 Cuando recibimos datos anidados y queremos simplificarlos.
2 Cuando importamos datos de una API que devuelve informaciÃ³n en varios niveles.
3 Cuando necesitamos operar sobre todos los elementos sin preocuparnos de los subarrays. */

// - flatMap: Aplica una funciÃ³n y aplana el array resultante en un solo nivel.
// AquÃ­ dividimos frases en palabras.
/* split() es un mÃ©todo que divide una cadena de texto en un array de subcadenas, usando un delimitador que determines, en este caso es el espacio.
Es muy Ãºtil cuando necesitas procesar o manipular cadenas de texto de manera mÃ¡s especÃ­fica, separando las palabras o fragmentos de acuerdo con ciertos patrones. */
let phrases = ["Hola mundo", "AdiÃ³s mundo"];
let words = phrases.flatMap(phrase => phrase.split(" "));
console.log(words);

// ORDENACION DE ARRAYS

// - sort: Ordena un array alfabÃ©ticamente o numÃ©ricamente con una funciÃ³n de comparaciÃ³n.
let unsorted = ["b", "a", "d", "c"];
let sorted = unsorted.sort();
console.log(sorted);

/* El sort() en JavaScript ordena los elementos como si fueran cadenas de texto por defecto, lo que puede llevar a un orden incorrecto si estamos trabajando con nÃºmeros.
Para ordenar correctamente los nÃºmeros, es necesario proporcionar una funciÃ³n de comparaciÃ³n que defina cÃ³mo se deben ordenar los nÃºmeros, ya sea de menor a mayor (a - b) o de mayor a menor (b - a). */
unsorted = [3, 4, 1, 6, 10];
sorted = unsorted.sort((a, b) => a - b); // Orden ascendente
console.log(sorted);

//-  reverse: Invierte el orden de los elementos del array.
sorted.reverse();
console.log(sorted);

// BUSQUEDA EN ARRAYS

// - includes: Verifica si un array contiene un elemento.
console.log(sorted.includes(4)); // true
console.log(sorted.includes(5)); // false

// - find: Devuelve el primer elemento que cumple una condiciÃ³n.
let firstEven = sorted.find(element => element % 2 === 0);
console.log(firstEven);

// - findIndex: Devuelve el Ã­ndice del primer elemento que cumple una condiciÃ³n.
let firstEvenIndex = sorted.findIndex(element => element % 2 === 0);
console.log(firstEvenIndex);


// Sets avanzados

// OPERACIONES CON SETS

// - EliminaciÃ³n de duplicados con Set
let numbersArray = [1, 2, 2, 3, 4, 5, 6, 6];
numbersArray = [...new Set(numbersArray)];
console.log(numbersArray);

// - UniÃ³n de conjuntos (combinamos elementos de ambos sets)
const setA = new Set([1, 2, 3]);
const setB = new Set([2, 3, 4, 5]);
const union = new Set([...setA, ...setB]);
console.log(union);

// - IntersecciÃ³n de conjuntos (elementos en comÃºn entre ambos sets)
const intersection = new Set([...setA].filter(element => setB.has(element)));
console.log(intersection);

// - Diferencia de conjuntos (elementos en setA que no estÃ¡n en setB)
const difference = new Set([...setA].filter(element => !setB.has(element)));
console.log(difference);

// CONVERSION ENTRE ESTRUCTURAS

// - Convertir Set a Array
console.log([...setA]);


// ITERACION SOBRE UN SET
// - forEach en un Set
setA.forEach(element => console.log(element));

// SI QUISIERAMOS QUE LOS SETS HICIERAN OTRAS FUNCIONALIDADES COMO LOS QUE TIENE LOS ARRAYS, TENDRIAMOS QUE HACERLO DE LA MISMA MANERA QUE LO HEMOS ESTADO REALIZANDO, CONVIRTIENDOLOS EN ARRAYS


// Maps avanzados

// ITERACION SOBRE UN MAP

let myMap = new Map([
    ["name", "Irene"],
    ["age", 23]
]);

// - forEach en un Map: Recorremos clave y valor
/*
En los Map, el mÃ©todo forEach recibe los parÃ¡metros en el orden (valor, clave), a diferencia de los objetos normales en los que usamos (clave, valor).

Esto se debe a que Map estÃ¡ diseÃ±ado para almacenar claves y valores de manera ordenada y eficiente, permitiendo cualquier tipo de dato como clave (no solo strings como en los objetos). Al recorrerlo, el mÃ©todo forEach prioriza el valor antes que la clave porque el propÃ³sito principal de un Map es trabajar con pares clave-valor, y en muchas operaciones el valor es lo mÃ¡s relevante.
*/
myMap.forEach((value, key) => console.log(`${key}: ${value}`));

// CONVERSION ENTRE ESTRUCTURAS

// - Convertir un Map a un Array
const arrayFromMap = Array.from(myMap);
console.log(arrayFromMap);

// - Convertir un Map a un Objeto
const objectFromMap = Object.fromEntries(myMap);
console.log(objectFromMap);

// - Convertir un Objeto a un Map
const mapFromObject = new Map(Object.entries(objectFromMap));
console.log(mapFromObject);