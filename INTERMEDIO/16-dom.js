/* Manejo del DOM (Document Object Model):
El DOM (Document Object Model) es como un "mapa" o "치rbol" de tu p치gina web que JavaScript puede leer y modificar.
Cuando cargas una p치gina, el navegador convierte el c칩digo HTML en una estructura organizada de nodos (elementos, textos, atributos, etc.). JavaScript usa el DOM para cambiar cosas en la p치gina sin necesidad de recargarla.

Ejemplo: 
Imagina que tu p치gina web es un libro.
- El HTML es el contenido escrito en el libro (t칤tulos, p치rrafos, im치genes, enlaces, etc.).
- El DOM es como un 칤ndice din치mico que organiza todo lo que est치 en el libro y permite modificarlo sin necesidad de reescribirlo por completo.
- JavaScript usa el DOM para buscar, cambiar o agregar cosas en el libro sin necesidad de imprimir una nueva versi칩n.

Por ejemplo, si en tu libro hay un t칤tulo que dice "Mi Primera P치gina", JavaScript puede cambiarlo a "Bienvenido a Mi Web" sin necesidad de recargar el libro entero.
*/

console.log(document)

// SELECCI칍N DE ELEMENTOS
//-  M칠todos cl치sicos (b칰squeda por ID, clase y etiqueta)
const myElementById = document.getElementById("id"); // Busca un elemento por su ID
const myElementsByClass = document.getElementsByClassName("class"); // Busca todos los elementos con una clase espec칤fica
const myElementsByTag = document.getElementsByTagName("tag"); // Busca todos los elementos de un tipo de etiqueta (ej: "p", "div")
/* Los m칠todos tradicionales como getElementById, getElementsByClassName y getElementsByTagName no utilizan puntos (.) ni signos de # porque los par치metros que reciben son nombres de atributos, no selectores CSS. */


// - M칠todos modernos usando selectores CSS
const firstParagraph = document.querySelector(".paragraph"); // Selecciona el primer elemento con la clase "paragraph"
const allParagraphs = document.querySelectorAll(".paragraph"); // Selecciona todos los elementos con la clase "paragraph"
// Estos m칠todos s칤 utilizan sintaxis de selectores CSS, por lo que debes incluir . para clases y # para ID.


// MANIPULACI칍N DE ELEMENTOS
//- Cambiar el contenido de un elemento
const title = document.getElementById("title");
title.textContent = "Hola JavaScript"; // Modifica solo el texto dentro del elemento

// - Modificar el contenido HTML dentro de un contenedor
const container = document.querySelector(".container");
container.innerHTML = "<p>Esto es un nuevo p치rrafo</p>"; // Inserta un nuevo p치rrafo dentro del contenedor

/* 游늷 Ejemplo simple:
div.textContent = "<b>Hola</b>";  // Muestra: <b>Hola</b> (como texto)
div.innerHTML = "<b>Hola</b>";    // Muestra: Hola (en negrita)
游댳 Usa textContent cuando solo quieras texto plano.
游댳 Usa innerHTML cuando necesites interpretar HTML.
 */

// MODIFICACI칍N DE ATRIBUTOS
const link = document.querySelector("a"); // Selecciona el primer enlace encontrado en la p치gina

// - Obtener el valor de un atributo
const url = link.getAttribute("href"); // Obtiene la URL actual del enlace

// - Modificar un atributo (cambia la URL del enlace)
link.setAttribute("href", "https://example.com");

// - Comprobar si el enlace tiene un atributo espec칤fico
const hasTarget = link.hasAttribute("target"); // Devuelve true si tiene el atributo "target"

//-  Eliminar un atributo (en este caso, "target")
link.removeAttribute("target");


// INTERACCI칍N CON CLASES CSS
const box = document.querySelector(".box"); // Selecciona el primer elemento con la clase "box"
box.classList.add("selected"); // Agrega la clase "selected"
box.classList.remove("selected"); // Elimina la clase "selected"
box.classList.toggle("selected"); // Si la clase est치 presente, la quita; si no, la agrega


// MODIFICACI칍N DE ESTILOS
const button = document.querySelector("button"); // Selecciona el primer bot칩n encontrado
button.style.backgroundColor = "blue"; // Cambia el color de fondo a azul
button.style.color = "white"; // Cambia el color del texto a blanco
button.style.padding = "10px"; // Agrega espacio alrededor del texto dentro del bot칩n


// CREACION Y ELIMINACION DE ELEMENTOS EN EL DOM
// - Creaci칩n de un nuevo p치rrafo
const newParagraph = document.createElement("p"); // Crea un nuevo elemento <p> (p치rrafo)
newParagraph.textContent = "Este es un nuevo p치rrafo creado desde JS"; // Asigna un texto al p치rrafo
newParagraph.style.padding = "8px"; // Establece un padding (espaciado interno) de 8px para el p치rrafo

// - A침adir el p치rrafo a un contenedor en el HTML
const container = document.querySelector("#container"); // Busca un elemento con el id 'container'
container.appendChild(newParagraph); // A침ade el nuevo p치rrafo dentro del contenedor

// - Crear un nuevo elemento de lista (<li>) y a침adirlo a una lista existente (<ul>)
const itemsList = document.querySelector("ul"); // Busca la primera lista (<ul>) en el HTML
const newItem = document.createElement("li"); // Crea un nuevo elemento <li> (칤tem de lista)
newItem.textContent = "Nuevo elemento"; // Establece el texto del nuevo 칤tem de lista

// - Insertar el nuevo 칤tem en una posici칩n espec칤fica dentro de la lista
const secondItem = itemsList.children[1]; // Accede al segundo 칤tem de la lista (<li>) (칤ndice 1)
itemsList.insertBefore(newItem, secondItem); // Inserta el nuevo 칤tem antes del segundo 칤tem en la lista

// - A침adir el nuevo 칤tem al final de la lista
itemsList.append(newItem); // A침ade el nuevo 칤tem al final de la lista <ul> (despu칠s de todos los dem치s elementos)

// - A침adir el nuevo 칤tem al principio de la lista
itemsList.prepend(newItem); // Inserta el nuevo 칤tem al inicio de la lista <ul> (antes del primer elemento)

// - Insertar el nuevo 칤tem antes de un 칤tem espec칤fico (en este caso, el segundo 칤tem)
// Es lo mismo que si hicieramos lo de arriba (itemsList.insertBefore(newItem, secondItem)) pero esta forma es m치s moderna y sencilla.
secondItem.before(newItem); // Inserta el nuevo 칤tem justo antes del 'secondItem' en la lista

// - Insertar el nuevo 칤tem despu칠s de un 칤tem espec칤fico (en este caso, el segundo 칤tem)
secondItem.after(newItem); // Inserta el nuevo 칤tem justo despu칠s del 'secondItem' en la lista

// - Eliminaci칩n tradicional  
const parent = newParagraph.parentElement; // Obtiene el elemento padre del 'newParagraph'
parent.removeChild(newParagraph); // Elimina el 'newParagraph' del DOM utilizando el m칠todo tradicional con su elemento padre

// - Eliminaci칩n m치s moderna y sencilla
newParagraph.remove(); // Elimina el elemento 'newParagraph' del DOM (de forma directa y moderna)


// ELEMENTOS DEL DOM
// - Funci칩n para mostrar un mensaje cuando se hace clic
function showMsg() {
    alert("Clic!"); // Muestra un mensaje de alerta cuando se llama esta funci칩n
}

// - Buscar el bot칩n con id 'send' y a침adir un evento 'click'
const sendButton = document.querySelector("#send"); // Obtiene el bot칩n con id 'send'
//("Evento", funci칩n que queremos que se ejecute")
sendButton.addEventListener("click", showMsg); // Cuando el bot칩n se hace clic, ejecuta la funci칩n 'showMsg'

// - A침adir un evento 'click' usando una funci칩n de flecha (arrow function)
sendButton.addEventListener("click", () => {
    alert("Clic con una arrow function!"); // Muestra un mensaje cuando se hace clic, usando una funci칩n de flecha
})

// EVENTOS COMUNES
// - Evento 'DOMContentLoaded' (se ejecuta cuando el DOM ha sido completamente cargado)
document.addEventListener("DOMContentLoaded", () => {
    console.log("El DOM est치 completamente cargado"); // Muestra un mensaje en consola cuando el DOM est치 listo
})

// - Evento 'mouseenter' (cuando el mouse entra en el 치rea del bot칩n)
sendButton.addEventListener("mouseenter", () => {
    sendButton.style.backgroundColor = "green"; // Cambia el color de fondo del bot칩n a verde cuando el mouse entra
})

// - Evento 'mouseleave' (cuando el mouse sale del 치rea del bot칩n)
sendButton.addEventListener("mouseleave", () => {
    sendButton.style.backgroundColor = "blue"; // Cambia el color de fondo del bot칩n a azul cuando el mouse sale
})

// - Evento 'submit' en un formulario (se ejecuta cuando el formulario se env칤a)
const form = document.querySelector("form"); // Obtiene el formulario del documento
form.addEventListener("submit", (event) => {
    // C칩digo que se ejecuta cuando se env칤a el formulario
    event.preventDefault(); // Previene que el formulario se env칤e de forma predeterminada (si quieres hacer algo antes de enviarlo)
})