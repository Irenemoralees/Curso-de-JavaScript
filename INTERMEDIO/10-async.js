// Programaci√≥n as√≠ncrona

// C√≥digo s√≠ncrono

console.log("Inicio")

for (let i = 0; i < 100000000; i++) { }

console.log("Fin")

// Event Loop (Bucle de eventos)

// Componentes del Event Loop:
// 1. Call Stack (Pila de ejecuci√≥n)
// 2. Web APIs (APIs del navegador) o Node.js:
// 3. Task Queue (setTimeout()) y Microtask Queue (Promesas)

// Flujo del Event Loop:
// 1. Ejecuta lo que tiene en el Call Stack
// 2. Si encuentra operaciones as√≠ncronas lo que va a terminar haciendo es transferir la ejecuci√≥n de las operaciones as√≠ncronas a otro componente del entorno de ejecuci√≥n como -> Web APIs (en el navegador) o Node.js (en un entorno de servidor)
// 3.  Cuando la operaci√≥n termina -> La coloca en Task Queue o Microtask Queue
// 4. Revisa si el Call Stack esta vac√≠o -> Mueve las tareas del Microtask Queue o Task Queue al Call Stack
// 5. El proceso se repite


// C√≥digo as√≠ncrono
// - Callbacks

console.log("Inicio")

setTimeout(() => {
    console.log("Esto se ejecuta despu√©s de 2 segundos")
}, 2000)

console.log("Fin")

/* - El problema de los Callback : Callback Hell
El Callback Hell es un problema que ocurre cuando anidamos demasiados callbacks dentro de callbacks, lo que hace que el c√≥digo sea dif√≠cil de leer, entender y mantener.

üîπ Ocurre cuando trabajamos con funciones as√≠ncronas (setTimeout, peticiones HTTP, etc.) y dependemos de m√∫ltiples callbacks anidados.
*/

function step1(callback) {
    setTimeout(() => {
        console.log("Paso 1 completado")
        callback()
    }, 1000)
}

function step2(callback) {
    setTimeout(() => {
        console.log("Paso 2 completado")
        callback()
    }, 1000)
}

function step3(callback) {
    setTimeout(() => {
        console.log("Paso 3 completado")
        callback()
    }, 1000)
}

step1(() => {
    step2(() => {
        step3(() => {
            console.log("Todos los pasos completados")
        })
    })
})

/* - Promesas
Las Promesas son usadas para manejar operaciones as√≠ncronas (como pedir datos de una API, leer archivos, esperar respuestas de un servidor, etc.).
üîπ Las Promesas permiten manejar c√≥digo as√≠ncrono sin callbacks anidados.
üîπ Tienen 3 estados: 
1Ô∏è‚É£ pending (pendiente) ‚Üí Estado inicial, la promesa todav√≠a no ha completado la operaci√≥n.
2Ô∏è‚É£ fulfilled (cumplida) ‚Üí Se ejecut√≥ resolve(), la promesa tuvo √©xito.
3Ô∏è‚É£ rejected (rechazada) ‚Üí Se ejecut√≥ reject(), la promesa fall√≥.
üîπ Se manejan con .then() (para √©xito) y .catch() (para errores).
üîπ Se pueden encadenar varias .then() para ejecutar tareas en orden.
üîπ async/await hace que el c√≥digo sea a√∫n m√°s claro y f√°cil de leer.
*/

const promise = new Promise((resolve, reject) => {
    setTimeout(() => {
        const ok = false
        if (ok) {
            resolve("Operaci√≥n exitosa")
        } else {
            reject("Se ha producido un error")
        }
    }, 4000)
})

/* .then() y .catch() son m√©todos que usamos con Promesas para manejar el resultado de una operaci√≥n as√≠ncrona.

.then() ‚Üí Se ejecuta si la promesa se resuelve con √©xito (resolve).
.catch() ‚Üí Se ejecuta si la promesa es rechazada (reject).
*/

promise
    .then(result => {
        console.log(result)
    })
    .catch(error => {
        console.log(error)
    })

// - Encadenamiento de promesas para evitar el Callback Hell

function step1Promise() {
    return new Promise(resolve => {
        setTimeout(() => {
            console.log("Paso 1 con promesa completado")
            resolve()
        }, 1000)
    })
}

function step2Promise() {
    return new Promise(resolve => {
        setTimeout(() => {
            console.log("Paso 2 con promesa completado")
            resolve()
        }, 1000)
    })
}

function step3Promise() {
    return new Promise(resolve => {
        setTimeout(() => {
            console.log("Paso 3 con promesa completado")
            resolve()
        }, 1000)
    })
}

step1Promise()
    .then(step2Promise)
    .then(step3Promise)
    .then(() => {
        console.log("Todos los pasos con promesa completados")
    })

/* - Async/Await
 async y await son palabras clave que facilitan el manejo de c√≥digo as√≠ncrono de una manera m√°s clara y legible, evitando el uso excesivo de promesas encadenadas (.then()).
 async
La palabra clave async se usa para declarar una funci√≥n que siempre devuelve una promesa. Si la funci√≥n devuelve un valor, autom√°ticamente se envuelve en una promesa.
await
La palabra clave await solo puede usarse dentro de funciones async y sirve para pausar la ejecuci√≥n hasta que una promesa se resuelva.
*/

function wait(ms) {
    return new Promise(resolve => setTimeout(resolve, ms))
}

async function process() {

    console.log("Inicio del proceso")

    await wait(5000)
    console.log("Proceso despu√©s de 5 segundos")

    await wait(1000)
    console.log("Proceso despu√©s de 1 segundo")

    await wait(2000)
    console.log("Proceso despu√©s de 2 segundos")

    console.log("Fin del proceso")
}

process()